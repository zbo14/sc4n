#!/bin/bash

sc4n="$(dirname "$0")"

log () {
  [ -z "$quiet" ] && echo "$1"
}

usage () {
  cat banner
  echo ""
  echo ""
  echo "USAGE: ./sc4n [OPTIONS] [file]"
  echo ""
  echo "OPTIONS:"
  echo "  -h  log usage information and exit"
  echo "  -n  number of scanner processes to spawn (default: nproc)"
  echo "  -o  path to output directory"
  echo "  -p  number of top ports to scan (default: 1000)"
  echo "  -q  don't print banner or info"
  echo "  -w  wordlist for web paths (default: ./lists/paths.txt)"
  echo "  -z  wordlist for virtual hosts (default: ./lists/hosts.txt)"
  exit
}

scanner () {
  id="$1"

  if [ "$1" -lt 10 ]; then
    id=0"$id"
  fi

  while true; do
    while true; do
      mkdir "$lock" 2> /dev/null && break
      sleep 1."$RANDOM"
    done

    domain="$(head -1 "$input")"
    sed -i '1d' "$input"

    rm -rf "$lock"

    if [ "$domain" == "done" ]; then
      log "[p#$id] Stopping"
      exit
    elif ! [[ "$domain" =~ [0-9A-Za-z]+ ]]; then
      sleep 1."$RANDOM"
      continue
    fi

    ips="$(dig -t A +short "$domain")"

    [[ "$ips" =~ [0-9]+ ]] || continue

    log "[p#$id] Resolved $domain"

    subdir="$output/$domain"
    mkdir -p "$subdir"

    echo "$ips" > "$subdir"/ips.txt

    log "[p#$id] Scanning ports for $domain"

    ports="$(sudo nmap \
      -A \
      -n \
      -Pn \
      -sS \
      --top-ports "$tports" \
      -iL "$subdir"/ips.txt)"

    echo "$ports" > "$subdir"/ports.txt

    if [[ "$ports" =~ 443/tcp[[:space:]]*open ]]; then
      url=https://"$domain"
    elif [[ "$ports" =~ 80/tcp[[:space:]]*open ]]; then
      url=http://"$domain"
    elif [[ "$ports" =~ 8080/tcp[[:space:]]*open ]]; then
      url=http://"$domain":8080
    fi

    [ -z "$url" ] && continue

    log "[p#$id] Scanning virtual hosts for $url"

    hosts () {
      while read -r host; do
        echo "$host"
        echo "$host.$1"
      done < "$hostlist"
    }

    hosts "$domain" | ffuf \
      -u "$url" \
      -H "Host: FUZZ" \
      -o "$subdir"/vhosts.md \
      -of md \
      -w - \
      &> /dev/null

    log "[p#$id] Scanning web paths for $url"

    python3 "$sc4n"/dirsearch/dirsearch.py \
      -Eu "$url" \
      --plain-text-report="$subdir"/paths.txt \
      -t 20 \
      -w "$pathlist" \
      > /dev/null

    log "[p#$id] Scanning JS files for $url"

    python "$sc4n"/LinkFinder/linkfinder.py \
      -d \
      -i "$url" \
      -o cli \
      > "$subdir"/links.txt
  done
}

while getopts ":hn:o:p:qw:z:" opt; do
  case ${opt} in
    h)
      usage
      ;;

    n)
      nprocs="$OPTARG"

      if ! [[ "$nprocs" =~ ^[0-9]+$ ]]; then
        echo "Expected -n to be an integer"
        exit 1
      elif [ "$nprocs" -lt 1 ]; then
        echo "Expected -n to be greater than/equal to 1"
        exit 1
      fi
      ;;

    o)
      output="$(realpath "$OPTARG")"

      if [ ! -d "$output" ]; then
        echo "Couldn't find output directory $output"
        exit 1
      fi
      ;;

    p)
      tports="$(realpath "$OPTARG")"

      if ! [[ "$tports" =~ ^[0-9]+$ ]]; then
        echo "Expected -p to be an integer"
        exit 1
      elif [ "$tports" -lt 1 ]; then
        echo "Expected -p to be greater than/equal to 1"
        exit 1
      fi
      ;;

    q)
      quiet=1
      ;;

    w)
      pathlist="$(realpath "$OPTARG")"

      if [ ! -f "$pathlist" ]; then
        echo "Couldn't find path list $pathlist"
        exit 1
      fi
      ;;

    z)
      hostlist="$(realpath "$OPTARG")"

      if [ ! -f "$hostlist" ]; then
        echo "Couldn't find host list $hostlist"
        exit 1
      fi
      ;;

  esac
done

shift $((OPTIND-1))

if [ ! -z "$1" ]; then
  filename="$(realpath "$1")"

  if [ ! -f "$filename" ]; then
    echo "Couldn't find file $filename"
    exit 1
  fi
fi

nprocs=${nprocs:-"$(nproc)"}
tmp="$(mktemp -d)"
lock="$tmp"/lock
input="$tmp"/input
output=${output:-"$PWD"}
lists="$sc4n"/lists
tports=${tports:-1000}
pathlist=${pathlist:-"$lists"/paths.txt}
hostlist=${hostlist:-"$lists"/hosts.txt}

touch "$input"

log "$(cat "$sc4n"/banner)"
log ""
log ""

if [ ! -z "$filename" ]; then
  log "[main] Copying domains to file"
  cp "$filename" "$input"
fi

log "[main] Starting scanner processes"

for i in $(seq 1 "$nprocs"); do
  scanner "$i" &
done

if [ -z "$filename" ]; then
  log "[main] Reading domains from stdin"

  while read -r domain; do
    echo "$domain" >> "$input"
  done
fi

for _ in $(seq 1 "$nprocs"); do
  echo "done" >> "$input"
done

wait

log "[main] Cleaning up"

rm -rf "$tmp"

log "[main] Done!"
